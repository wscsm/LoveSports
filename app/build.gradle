apply plugin: 'com.android.application'

android {
    signingConfigs {
        mykeystore {
            def Properties localProps = new Properties()
            localProps.load(new FileInputStream(file('../local.properties')))
            def Properties keyProps = new Properties()
            assert localProps['keystore.props.file'];
            keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
            storeFile file(keyProps["store"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["pass"]
        }
    }

    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId project.APPLICATION_ID
        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
    }

    buildTypes {
        android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def file = output.outputFile
                output.outputFile = new File(file.parent, file.name.replace("app-release.apk", "LoveSports-" + defaultConfig.versionName + "-" + getDate() + ".apk"))
            }
        }

        debug {
            signingConfig signingConfigs.mykeystore

            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.mykeystore
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
        }
    }
    productFlavors {
    }

    lintOptions {
        abortOnError false

        // for ButterKnife;
        disable 'InvalidPackage'
        disable 'ValidFragment'
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }
}

//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':avatar')
    compile project(':imageslider')
    compile project(':slidingmenu')
    compile project(':pickview')
    compile "com.jakewharton:butterknife:${BUTTERKNIFE_VERSION}"
    compile "de.greenrobot:eventbus:${EVENTBUS_VERSION}"
    compile "com.loopj.android:android-async-http:${ASYNC_HTTP_VERSION}"
    compile "net.danlew:android.joda:${JODA_TIME_VERSION}"
    //    compile "com.facebook.fresco:fresco:${FRESCO_VERSION}"
    compile "com.nineoldandroids:library:${NINEOLDANDROIDS_VERSION}"
    compile "com.joanzapata.android:android-iconify:${ICONIFY_VERSION}"
    compile "com.specyci:residemenu:${RESIDE_MENU_VERSION}"
    compile "com.github.bumptech.glide:glide:${GLIDE_VERSION}"
    compile "com.andreabaccega:android-form-edittext:${FORM_EDITTEXT_VERSION}"
    compile "com.baoyz.pullrefreshlayout:library:${PULL_REFRESH_LAYOUT_VERSION}"
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:support-v4:22.2.1'
}
